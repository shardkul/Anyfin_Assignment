SELECT 
APP1.ID AS APP_ID,
APP1.CREATED_AT,
APP1.CUSTOMER_ID,
COUNT(DISTINCT APP2.ID) AS NO_OF_APPS,
COUNT(DISTINCT APP2.LOAN_ID) AS NO_OF_LOAN,
COUNT(DISTINCT CASE WHEN CYC.STATUS = 'paid' THEN CYC.ID END) AS NO_OF_PAID_CYCLES,
COUNT(DISTINCT CASE WHEN CYC.STATUS <> 'paid' THEN CYC.ID END) AS NO_OF_UNPAID_CYCLES,
COALESCE(AVG(CYC_30D.DPD),0)::NUMERIC(10,2) AS AVG_DPD_30D,
COALESCE(MAX(CYC_30D.DPD),0) AS MAX_DPD_30D,
COALESCE(AVG(CYC_60D.DPD),0)::NUMERIC(10,2) AS AVG_DPD_60D,
COALESCE(MAX(CYC_60D.DPD),0) AS MAX_DPD_60D,
LOCALTIMESTAMP as INSERTED_AT

FROM APPLICATIONS APP1
LEFT JOIN APPLICATIONS APP2 ON (APP1.CUSTOMER_ID = APP2.CUSTOMER_ID AND APP1.CREATED_AT > APP2.CREATED_AT)
LEFT JOIN CYCLES CYC ON (APP1.CUSTOMER_ID = CYC.CUSTOMER_ID AND APP1.CREATED_AT > CYC.CREATED_AT)
LEFT JOIN CYCLES CYC_30D ON (APP1.CUSTOMER_ID = CYC_30D.CUSTOMER_ID AND CYC_30D.CREATED_AT BETWEEN (APP1.CREATED_AT - INTERVAL '30 day') AND APP1.CREATED_AT )
LEFT JOIN CYCLES CYC_60D ON (APP1.CUSTOMER_ID = CYC_60D.CUSTOMER_ID AND CYC_60D.CREATED_AT BETWEEN (APP1.CREATED_AT - INTERVAL '60 day') AND APP1.CREATED_AT )


WHERE APP1.ID IS NOT NULL AND APP1.CUSTOMER_ID IS NOT NULL
GROUP BY APP1.ID,APP1.CREATED_AT,APP1.CUSTOMER_ID
ORDER BY 2;
